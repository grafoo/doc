* window manager
  to get X properties of a window run `xprop`
** resize supermicro ipmi kvm window
  wmctrl -l
  xprop -id 0x0380001d -remove WM_NORMAL_HINTS
  wmctrl -i -r 0x0380001d -e '0,0,0,1027,794'

* browser
** firefox
   - get emacs keybindings when editing text
     edit ~/.gtkrc-2.0
     gtk-key-theme-name = "Emacs"

   - change theme (e.g. scrollbar)
     edit ~/.gtkrc-2.0
     gtk-theme-name="Adwaita"
   ref: http://kb.mozillazine.org/Emacs_Keybindings_(Firefox)
*** change ui
    ~/.mozilla/firefox/r4nd0m.default/chrome/userChrome.css

   ! gtk 3.0
   ~/.config/gtk-3.0/settings.ini
   [Settings]
   gtk-key-theme-name = "Emacs"
** Electrolysis (https://wiki.mozilla.org/Electrolysis)
   about:config ->
   - set `dom.ipc.processCount` to e.g. 7
   - set `browser.tabs.remote.autostart` to true
** install unsigned xpi
   set xpinstall.signatures.required to false

* virtualbox
    openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -days 36500 -subj "/CN=MOK Signing/"

    sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 ./MOK.priv ./MOK.der $(modinfo -n vboxdrv)
    sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 ./MOK.priv ./MOK.der $(modinfo -n vboxnetflt)
    sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 ./MOK.priv ./MOK.der $(modinfo -n vboxnetadp)
    sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 ./MOK.priv ./MOK.der $(modinfo -n vboxpci)

    # dono if this is really needed
    sudo mokutil --import MOK.der
    http://askubuntu.com/questions/787471/virtualbox-5-is-unable-to-create-a-host-only-adapter-on-ubuntu-16-04

* xorg
  echo "/usr/bin/Xorg                 root:root       4711" >> /etc/permissions.local
  chkstat --system --set

* ssh
** control master
   ssh -O exit <hostname>
   ssh -O check <hostname>

* keybindings
** emacs and gtk
   /usr/share/themes/Emacs/

* emacs
** faces
   - go to line where face to customize can be found hit meta-x customize-face
** build
   curl -LO https://ftp.gnu.org/gnu/emacs/emacs-25.2.tar.gz
   tar -xf emacs-25.2.tar.gz
   cd emacs-25.2/
   aclocal
   automake
   ./configure --with-x-toolkit=no --without-selinux --with-sound=no --prefix="${HOME}/app/emacs-25.2"

* pxeboot
  http://www.linux-sxs.org/internet_serving/pxeboot.html
Setting up a PXE-Boot Server
Written by Net Llama! on 17-Sept-2005



This documents how to setup a PXE boot server for Linux. This assumes that you're using Redhat/FC as the PXE boot server. The vast majority of the information has been obtained from the following webpages:

http://dev.brantleyonline.com/wiki/index.php/General_Network_%28PXE%29_Booting
http://dev.brantleyonline.com/wiki/index.php/PXE_Booting_-_Fedora_Core

0) The first thing to note is that you need to setup your own mini-network that is completely disconnected from the network, since part of this process requires setting up a DHCP server which could conflict with the corporate DHCP server if they were both running on the same network simultaneously. So get yourself a switch from IT up front. You do *NOT* need the switch immediately, so just put it aside until I mention it again
later on.

1) The next step is to choose a box to be the PXE boot server. This can really be any box at all, as long as you have a NIC in it that works reliably under Linux. For the purposes of this documentation, I'm going to assume that you've loaded Fedora Core 4 on this box (do that now, if you've not already). Get this box onto the network with DHCP (just like a normal installation).

2) Next you'll need to install the following packages (which ship with FC4 already, so if you did an 'everything' OS install, you should have them already. If not, you can install them easily with yum):
tftp-server
dhcp
httpd
syslinux

If you use yum to install them, then it will be generally alot easier:
yum install tftp-server dhcp httpd syslinux
answer Y to all dependency/installation questions.

3) Now you need to setup the DHCP server. With the FC4 RPM for dhcp, all you need to do is create /etc/dhcpd.conf with the following contents:

ddns-update-style interim;
subnet 192.168.0.0 netmask 255.255.255.0 {
range 192.168.0.10 192.168.0.254;
default-lease-time 3600;
max-lease-time 4800;
option routers 192.168.0.1;
option domain-name-servers 192.168.0.1;
option subnet-mask 255.255.255.0;
option domain-name "llama.net";
option time-offset -8;
}

host llama0 {
hardware ethernet 04:4B:80:80:80:03;
fixed-address 192.168.0.254;
option host-name "llama0";
filename "pxelinux.0";
}

In a nutshell, this sets up a DNS server that will assign IP address 192.168.0.254 to your client box that has MAC address 04:4B:80:80:80:03 assigned to its PXE-boot capable NIC. Another thing to note is that we're reserving the private 192.168 subnet for this setup. The only thing you need to change in the above, is the MAC address to match that of the NIC on your client box.

4) Next you need to activate tftp within xinetd. All that is neccesary is to change disable=yes to disable=no in /etc/xinetd.d/tftp . Then restart xinetd. For future reference, the tftp RPM for FC4 stores its servable content under /tftpboot.

5) Now we need to setup your PXE server to use a static IP on the new private subnet. Create the file /etc/sysconfig/network-scripts/ifcfg-eth0.static with the following contents:

DEVICE=eth0
BOOTPROTO=STATIC
ONBOOT=no
TYPE=Ethernet
IPADDR=192.168.0.2
NETMASK=255.255.255.0
GATEWAY=192.168.0.1

6) Now we need to setup the PXE boot environment on the server. To do this, you need to have either the Linux distribution that you wish to install over PXE either in CD format, or all the content of the CDs available on the network.
On the first CD of every RH/FC distribution there is a subdirectory called 'isolinux'. In that directory you will find two files, vmlinuz and initrd.img. These are the kernel & initrd.img that the RH/FC bootable CDs use to get the installer (anaconda) booted for performing the installation. Copy both of those files into /tftpboot and make sure that they are world readable. If you are planning to allow more than one version/distribution to be PXE boot installable, then you should rename both files so that its clear that they are for whatever version/distribution they came from (such as vmlinuz-RHEL4, initrd-RHEL4).

Next, you need the actual pxe boot linux kernel (what is actually run immediately after your PXE boot client box gets a DHCP lease). In this case, that file is pxelinux.0, and is part of the syslinux RPM. For FC4, you can find it at /usr/lib/syslinux/pxelinux.0. Copy that file into /tftpboot and make sure that it is world readable.

7) Next we need to configure pxelinux. First create the directory /tftpboot/pxelinux.cfg (and make it world readable). Inside that directory you need to create a number of zero size files (use touch):
01-04-4B-80-80-80-03
C
C0
C0A
C0A8
C0A80
C0A800
C0A800F
C0A800FE
01-04-4B-80-80-80-03

The first 8 are the hex representation of the 192.168.0.254 IP address that your PXE boot client will be assigned. The permutations allow a broader IP subnet to be searched first for matches. The last entry is the MAC address of your PXE boot client's NIC (with dashes substituted for the colons), with '01' pre-pended. The "01" at the front represents a hardware type of Ethernet, so pxelinux.0 see's the configuration string as an IP address.

8) Now create the default pxelinux configuration inside the new file
/tftpboot/pxelinux.cfg/default:
prompt 1
default linux
timeout 100

label linux
kernel vmlinuz
append initrd=initrd.img ramdisk_size=9216 noapic acpi=off


9) Now you need to put the full contents of your Linux distro (all CDs) somewhere on disk. I put it under /tftpboot/RHEL4U1. In order to allow for installation over HTTP (apache), edit /etc/httpd/conf/httpd.conf and add the following:
<Directory /tftpboot/RHEL4U1>
Options Indexes
AllowOverride None
</Directory>
Alias /linux /tftpboot/RHEL4U1


10) At this stage, you're ready to hook up the switch. You should have CAT5 running between the switch & the PXE boot server, and the client box.

11) On the PXE boot server, bring down your DHCP network connected eth0 (ifdown eth0), disconnect the CAT5 connected to the network, and plug in the cat5 connected to your private switch. Now bring up the static IP for the PXE server with (ifup eth0.static). You can verify that it came up successfully by verifying that you have IP address 192.168.0.2 in ifconfig.

12) Now start dhcpd & apache and activate tftp by running the following:
service dhcpd start
service xinetd restart
service httpd start

and verify that they are all in your process list.

13) Plug the PXE client box's CAT5 into the switch, and verify that the NIC appears first in the BIOS boot order. (re)boot and you should get a DHCP lease, and start booting successfully off the network.

14) When you get into the RH/FC installer which asks you for the install method, choose HTTP. Fill in 192.168.0.2 for the name, and 'linux' for the path, and you should be all set.

15) If you run into any problems, check /var/log/messages for errors (that's where all dhcp & tftp stuff will get logged). /var/log/httpd is where apache logs, but if you get that far, your problem is an apache configuration/setup issue, and not a PXE boot issue.

* git
** commands
*** git stash show -p                                            :diff:stash:
** tools
*** gitolite3
**** list of remote commands available (invoke with `ssh user@host <command>`)
     - desc
     - help
     - info
     - perms
     - symbolic-ref
     - writable

* ntp
 - shamelessly stolen from http://nlug.ml1.co.uk/2012/01/ntpq-p-output/831

The Gentoo (and others?) incomplete man pages for “ntpq -p” merely give the description: “Print a list of the peers known to the server as well as a summary of their state.”

I had not seen this documented, hence here is a summary that can be used in addition to the brief version of the man page “man ntpq“. More complete details are given on: “ntpq – standard NTP query program” (source author), and other examples of the man ntpq pages.

NTP is a protocol designed to synchronize the clocks of computers over a (WAN or LAN) udp network. From Wikipedia – NTP:

    The Network Time Protocol (NTP) is a protocol and software implementation for synchronizing the clocks of computer systems over packet-switched, variable-latency data networks. Originally designed by David L. Mills of the University of Delaware and still maintained by him and a team of volunteers, it was first used before 1985 and is one of the oldest Internet protocols.

For an awful lot more than you might ever want to know about time and NTP, see “The NTP FAQ, Time, what Time?” and the current RFCs for NTP. The earlier “Network Time Protocol (Version 3) RFC” (txt, or pdf, Appendix E, The NTP Timescale and its Chronometry, p70) includes an interesting explanation of the changes in, and relations between, our timekeeping systems over the past 5000 years or so. Wikipedia gives a broader view in the articles Time and Calendar.

The command “ntpq -p” outputs a table such as for example:

     remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
 LOCAL(0)        .LOCL.          10 l  96h   64    0    0.000    0.000   0.000
*ns2.example.com 10.193.2.20      2 u  936 1024  377   31.234    3.353   3.096

Further detail:
Table headings:

    remote – The remote peer or server being synced to. “LOCAL” is this local host (included in case there are no remote peers or servers available);
    refid – Where or what the remote peer or server is itself synchronised to;
    st – The remote peer or server Stratum
    t – Type (u: unicast or manycast client, b: broadcast or multicast client, l: local reference clock, s: symmetric peer, A: manycast server, B: broadcast server, M: multicast server, see “Automatic Server Discovery“);
    when – When last polled (seconds ago, “h” hours ago, or “d” days ago);
    poll – Polling frequency: rfc5905 suggests this ranges in NTPv4 from 4 (16s) to 17 (36h) (log2 seconds), however observation suggests the actual displayed value is seconds for a much smaller range of 64 (26) to 1024 (210) seconds;
    reach – An 8-bit left-shift shift register value recording polls (bit set = successful, bit reset = fail) displayed in octal;
    delay – Round trip communication delay to the remote peer or server (milliseconds);
    offset – Mean offset (phase) in the times reported between this local host and the remote peer or server (RMS, milliseconds);
    jitter – Mean deviation (jitter) in the time reported for that remote peer or server (RMS of difference of multiple time samples, milliseconds);

Select Field tally code:

The first character displayed in the table (Select Field tally code) is a state flag (see Peer Status Word) that follows the sequence ” “, “x”, “-“, “#”, “+”, “*”, “o”:

    ” ” – No state indicated for:
        non-communicating remote machines,
        “LOCAL” for this local host,
        (unutilised) high stratum servers,
        remote machines that are themselves using this host as their synchronisation reference;
    “x” – Out of tolerance, do not use (discarded by intersection algorithm);
    “–” – Out of tolerance, do not use (discarded by the cluster algorithm);
    “#” – Good remote peer or server but not utilised (not among the first six peers sorted by synchronization distance, ready as a backup source);
    “+” – Good and a preferred remote peer or server (included by the combine algorithm);
    “*” – The remote peer or server presently used as the primary reference;
    “o” – PPS peer (when the prefer peer is valid). The actual system synchronization is derived from a pulse-per-second (PPS) signal, either indirectly via the PPS reference clock driver or directly via kernel interface.

See the Clock Select Algorithm.
“refid”:

The refid can have the status values:

    An IP address – The IP address of a remote peer or server;
    .LOCL. – This local host (a place marker at the lowest stratum included in case there are no remote peers or servers available);
    .PPS. – “Pulse Per Second” from a time standard;
    .IRIG. – Inter-Range Instrumentation Group time code;
    .ACTS. – American NIST time standard telephone modem;
    .NIST. – American NIST time standard telephone modem;
    .PTB. – German PTB time standard telephone modem;
    .USNO. – American USNO time standard telephone modem;
    .CHU. – CHU (HF, Ottawa, ON, Canada) time standard radio receiver;
    .DCFa. – DCF77 (LF, Mainflingen, Germany) time standard radio receiver;
    .HBG. – HBG (LF Prangins, Switzerland) time standard radio receiver;
    .JJY. – JJY (LF Fukushima, Japan) time standard radio receiver;
    .LORC. – LORAN-C station (MF) time standard radio receiver. Note, no longer operational (superseded by eLORAN);
    .MSF. – MSF (LF, Anthorn, Great Britain) time standard radio receiver;
    .TDF. – TDF (MF, Allouis, France) time standard radio receiver;
    .WWV. – WWV (HF, Ft. Collins, CO, America) time standard radio receiver;
    .WWVB. – WWVB (LF, Ft. Collins, CO, America) time standard radio receiver;
    .WWVH. – WWVH (HF, Kauai, HI, America) time standard radio receiver;
    .GOES. – American Geosynchronous Orbit Environment Satellite;
    .GPS. – American GPS;
    .GAL. – Galileo European GNSS;
    .ACST. – manycast server;
    .AUTH. – authentication error;
    .AUTO. – Autokey sequence error;
    .BCST. – broadcast server;
    .CRYPT. – Autokey protocol error;
    .DENY. – access denied by server;
    .INIT. – association initialized;
    .XFAC. – association changed (IP address changed or lost);
    .MCST. – multicast server;
    .RATE. – (polling) rate exceeded;
    .TIME. – association timeout;
    .STEP. – step time change, the offset is less than the panic threshold (1000ms) but greater than the step threshold (125ms).

Operation notes

A time server will report time information with no time updates from clients (unidirectional updates), whereas a peer can update fellow participating peers to converge upon a mutually agreed time (bidirectional updates).

During initial startup:

    Unless using the iburst option, the client normally takes a few minutes to synchronize to a server. If the client time at startup happens to be more than 1000s distant from NTP time, the daemon exits with a message to the system log directing the operator to manually set the time within 1000s and restart. If the time is less than 1000s but more than 128s distant, a step correction occurs and the daemon restarts automatically.

    When started for the first time and a frequency file is not present, the daemon enters a special mode in order to calibrate the frequency. This takes 900s during which the time is not disciplined. When calibration is complete, the daemon creates the frequency file and enters normal mode to amortize whatever residual offset remains.

Stratum 0 devices are such as atomic (caesium, rubidium) clocks, GPS clocks, or other time standard radio clocks providing a time signal to the Stratum 1 time servers. NTP reports UTC (Coordinated Universal Time) only. Client programs/utilities then use time zone data to report local time from the synchronised UTC.

The protocol is highly accurate, using a resolution of less than a nanosecond (about 2-32 seconds). The time resolution achieved and other parameters for a host (host hardware and operating system limited) is reported by the command “ntpq -c rl” (see rfc1305 Common Variables and rfc5905).
“ntpq -c rl” output parameters:

    precision is rounded to give the next larger integer power of two. The achieved resolution is thus 2precision (seconds)
    rootdelay – total roundtrip delay to the primary reference source at the root of the synchronization subnet. Note that this variable can take on both positive and negative values, depending on clock precision and skew (seconds)
    rootdisp – maximum error relative to the primary reference source at the root of the synchronization subnet (seconds)
    tc – NTP algorithm PLL (phase locked loop) or FLL (frequency locked loop) time constant (log2)
    mintc – NTP algorithm PLL/FLL minimum time constant or ‘fastest response’ (log2)
    offset – best and final offset determined by the combine algorithm used to discipline the system clock (ms)
    frequency – system clock period (log2 seconds)
    sys_jitter – best and final jitter determined by the combine algorithm used to discipline the system clock (ms)
    clk_jitter – host hardware(?) system clock jitter (ms)
    clk_wander – host hardware(?) system clock wander (PPM – parts per million)

Jitter (also called timing jitter) refers to short-term variations in frequency with components greater than 10Hz, while wander refers to long-term variations in frequency with components less than 10Hz. (Stability refers to the systematic variation of frequency with time and is synonymous with aging, drift, trends, etc.)
Operation notes (continued)

The NTP software maintains a continuously updated drift correction. For a correctly configured and stable system, a reasonable expectation for modern hardware synchronising over an uncongested internet connection is for network client devices to be synchronised to within a few milliseconds of UTC at the time of synchronising to the NTP service. (What accuracy can be expected between peers on an uncongested Gigabit LAN?)

Note that for UTC, a leap second can be inserted into the reported time up to twice a year to allow for variations in the Earth’s rotation. Also beware of the one hour time shifts for when local times are reported for “daylight savings” times. Also, the clock for a client device will run independently of UTC until resynchronised oncemore, unless that device is calibrated or a drift correction is applied.

What happens during a Leap Second?

    During a leap second, either one second is removed from the current day, or a second is added. In both cases this happens at the end of the UTC day. If a leap second is inserted, the time in UTC is specified as 23:59:60. In other words, it takes two seconds from 23:59:59 to 0:00:00 instead of one. If a leap second is deleted, time will jump from 23:59:58 to 0:00:00 in one second instead of two. See also The Kernel Discipline.

So… What actually is the value for the step threshold: 125ms or 128ms? And what are the PLL/FLL tc units (log2 s? ms?)? And what accuracy can be expected between peers on an uncongested Gigabit LAN?

 

Thanks for comments from Camilo M and Chris B. Corrections and further details welcomed.

Cheers,
Martin

 
Apocrypha:

    The epoch for NTP starts in year 1900 while the epoch in UNIX starts in 1970.
    Time corrections are applied gradually, so it may take up to three hours until the frequency error is compensated.
    Peerstats and loopstats can be logged to summarise/plot time offsets and errors
    RMS – Root Mean Square
    PLL – Phase locked loop
    FLL – Frequency locked loop
    PPM – Parts per million, used here to describe rate of time drift
    man ntpq (Gentoo brief version)
    man ntpq (long version)
    man ntpq (Gentoo long version)

See:

    ntpq – standard NTP query program
    The Network Time Protocol (NTP) Distribution
    A very brief history of NTP
    A more detailed brief history: “Mills, D.L., A brief history of NTP time: confessions of an Internet timekeeper. Submitted for publication; please do not cite or redistribute” (pdf)
    NTP RFC standards documents
    Network Time Protocol (Version 3) RFC – txt, or pdf. Appendix E, The NTP Timescale and its Chronometry, p70, includes an interesting explanation of the changes in, and relations between, our timekeeping systems over the past 5000 years or so
    Wikipedia: Time and Calendar
    John Harrison and the Longitude problem
    Clock of the Long Now – The 10,000 Year Clock
    John C Taylor – Chronophage
    Orders of magnitude of time
    The Greenwich Time Signal

Others:

SNTP (Simple Network Time Protocol, RFC 4330) is basically also NTP, but lacks some internal algorithms for servers where the ultimate performance of a full NTP implementation based on RFC 1305 is neither needed nor justified.

The W32Time Windows Time Service is a non-standard implementation of SNTP, with no accuracy guarantees, and an assumed accuracy of no better than about a 1 to 2 second range. (Is that due to there being no system clock drift correction and a time update applied only once every 24 hours assumed for a PC with typical clock drift?)

There is also the PTP (IEEE 1588) Precision Time Protocol. See Wikipedia: Precision Time Protocol. A software demon is PTPd. The significant features are that it is intended as a LAN high precision master-slave synchronisation system synchronising at the microsecond scale to a master clock for International Atomic Time (TAI, monotonic, no leap seconds). Data packet timestamping can be appended by hardware at the physical layer by a network interface card or switch for example. Network kit supporting PTP can timestamp data packets in and out in a way that removes the delay effect of processing within the switch/router. You can run PTP without hardware timestamping but it might not synchronise if the time errors introduced are too great. Also it will struggle to work through a router (large delays) for the same reason.
Older time synchronization protocols:

    DTSS – Digital Time Synchronisation Service by Digital Equipment Corporation, superseded by NTP. See an example of DTSS VMS C code c2000. (Any DTSS articles/documentation anywhere?)
    DAYTIME protocol, synchronization protocol using TCP or UDP port 13
    ICMP Timestamp and ICMP Timestamp Reply, synchronization protocol using ICMP
    Time Protocol, synchronization protocol using TCP or UDP port 37

* dns
** transfer zone
   dig axfr example.com @nameserver.example.com
* network
** vlan
modprobe --first-time 8021q
modinfo 8021q

create an 802.1Q VLAN interface on Ethernet interface eth0, with name VLAN8 and ID 8
ip link add link eth0 name eth0.8 type vlan id 8


remove the VLAN
ip link delete eth0.8
** routing
https://www.thomas-krenn.com/en/wiki/Two_Default_Gateways_on_One_System
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/s1-networkscripts-static-routes.html

#+BEGIN_SRC sh
sysctl net.ipv4.ip_forward=1
iptables -t nat -A POSTROUTING -o <interface> -j MASQUERADE
#+END_SRC

* man
to make man find manpages in custom places add the path MANPATH variable.
* remote management
** supermicro

   smcipmitool 192.168.1.123 username password shell
   vmwa dev2iso /path/to/image.iso
   vmwa status
   vmwa dev2stop
* terminal
** install new terminal definition
mkdir -p $HOME/.terminfo
rsync /usr/share/terminfo/ $HOME/.terminfo/
export TERMINFO=$HOME/.terminfo
tic <terminfofile>
* rpm
- %pre - Executed before installation.
- %preun - Executed before un-installation.
- %post - Executed after installation.
- %postun - Executed after un-installation.


in the different variants $1 will have following values:

|                      | %pre | %preun | %post | %postun |
| initial installation |    1 |   null |     1 |    null |
| upgrade              |    2 |      1 |     2 |       1 |
| uninstallation       | null |      0 |  null |       0 |




| install      | upgrade                                | uninstall      |
| %pre ($1=1)  | %pre ($1=2)                            | %preun ($1=0)  |
| copy files   | copy files                             | remove files   |
| %post ($1=1) | %post ($1=2)                           | %postun ($1=0) |
|              | %preun ($1=1) from old RPM.            |                |
|              | delete files only found in old package |                |
|              | %postun ($1=1) from old RPM.           |                |


So when upgrading the exemplary package "software" from version 1 to version 2,
this is the script (%post and %postun) order:

1. Run %pre from "software-2".
2. Place files from "software-2".
3. Run %post from "software-2".
4. Run %preun from "software-1".
5. Delete files unique to "software-1".
6. Run %postun from "software-1".

This means there are cases where "software-1" has incorrect scripts, and there is no way to upgrade.
In that case the RPM can be uninstalled, which might execute different commands
because $1 equals 0 (un-install) instead of 1 (upgrade).
When the RPM uninstall scripts fail, the only way to fix things is to manually execute the intended commands...
RPM is not perfect, but it's pretty well thought through!


http://meinit.nl/rpm-spec-prepostpreunpostun-argument-values
https://fedoraproject.org/wiki/Packaging:Scriptlets
* schmankerl
dd if=/dev/sda bs=8M | gzip --best - | ssh user@host dd of=/home/user/foo.$(date +%F-%s).dd.gz
* infiniband
http://wwwx.cs.unc.edu/Research/bass/index.php/InfiniBand_Testing
** customize image
found on https://forums.servethehome.com/index.php?threads/flash-oem-ibm-mellanox-connectx-3-en-with-stock-firmware.8689/


Cross-flashing to Mellanox FW (ConnextX-2 or ConnextX-3 based devices only)
Not tested with all devices - may brick yours permanently - YMMV!

    First, backup the existing configuration if you ever need to recover it and to compare notes post-flash

1. Save basic info such as GUIDs, MACs, etc.:
Code:

flint -d <device> query full > flint_query.txt

2. Save low-level flash chip info:
Code:

flint -d <device> hw query > flint_hwinfo.txt

3. Save existing FW:
Code:

flint -d <device> ri orig_firmware.bin

4. Save existing FW configuration:
Code:

flint -d <device> dc orig_firmware.ini

5. Save existing PXE ROM image (if any):
Code:

flint -d <device> rrom orig_rom.bin

6. Save existing PCI VPD (vital product data):
Code:

mlxburn -d <device> -vpd > orig_vpd.txt

    Now, download "custom" Mellanox firmware tarball for your adapter from here (e.g. for the MCX312A-XCBT) and extract. Note that it must contain a multi-adapter MLX firmware file, NOT a BIN file.
    Finally, customize and burn:

1. Identify the correct configuration file for your device/revision (here, it's MCX_312A-XCB_A2-A6.ini)
2. "Burn" the new firmware to an image file (not the device) with the correct config:
Code:

mlxburn -fw fw-ConnectX3-rel.mlx -conf MCX312A-XCB_A2-A6.ini -wrimage mlnx_firmware.bin

3. Verify the image is good with flint (no errors or warnings, should say "is bootable"):
Code:

flint -i mlnx_firmware.bin verify

4. And check that the image's FW version and PSID are what you want:
Code:

flint -i mlnx_firmware.bin query full

5. Let's roll!
Code:

flint -d <device> -i mlnx_firmware.bin -allow_psid_change burn

Reboot, and verify with flint that the PSID has changed while the GUIDs/MACs are the same as before.
* linux
** boot
  | Depth | 800×600 | 1024×768 | 1152×864 | 1280×1024 | 1600×1200 |

                                                      
  -------------------------------------------------------------
  | 8 bit  | vga=771 | vga=773 | vga=353 | vga=775 | vga=796 |
  | 16 bit | vga=788 | vga=791 | vga=355 | vga=794 | vga=798 |
  | 24 bit | vga=789 | vga=792 | vga=795 | vga=799 |         |
  |        |         |         |         |         |         |
** hardware
*** consistent nic naming
https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-Disabling_Consistent_Network_Device_Naming.html
https://access.redhat.com/discussions/916973
ln -s /dev/null /etc/udev/rules.d/80-net-name-slot.rules
#+BEGIN_SRC sh
cp -a /etc/default/grub /etc/default/grub.tmp &&
            awk '/^GRUB_CMDLINE_LINUX/{sub("\"$"," net.ifnames=0\"");print}' \
                /etc/default/grub.tmp > foo &&
                rm /etc/default/grub.tmp
#+END_SRC
Note that the biosdevname package is not installed by default, so unless it gets installed, you don't need to add biosdevname=0 as a kernel argument.

* initramdisk
** initramfs vs initrd
*** initrd
- fixed size block device formated with filesystem e.g. ext2
- mapped to /dev/ram0
- supports pivot_root (required for switching from initrd to root)
*** initramfs
- cpio archive
- unpacked during boot to ramfs

** un/re-pack initrd
# mkdir test
# cd test

    Then uncompress and extract the initrd:

Raw

# zcat /boot/initrd-2.6.18-164.6.1.el5.img | cpio -idmv

    Edit the contents (if needed)
    Finally repack and compress the initrd image:

Raw

# find . | cpio -o -c | gzip -9 > /boot/test.img

    For image compressed with xz format, the below commands can be used to extract the initrd image.

Raw

# mkdir /tmp/initrd
# cd /tmp/initrd
# xz -dc < initrd.img | cpio --quiet -i --make-directories 

    Edit the contents (if needed)
    Finally repack and compress the initrd image:

Raw

# cd /tmp/initrd
# find . 2>/dev/null | cpio --quiet -c -o | xz -9 --format=lzma >"new_initrd.img"

* lvm
** snapshots
#+BEGIN_SRC sh
# when mounting xfs volumes nouuid is needed
mount -o ro,nouuid /dev/vg_system/lv_root_snapshot_pristine /mnt
cd /var/opt &&
  tar --create --one-file-system --xattrs --bzip2 --verbose --exclude=/var/opt --file=host_root.tar.bz2 /
#+END_SRC

dracut --force --add-drivers dm-snapshot
lsinitrd /boot/initramfs-$(uname -r).img|grep dm-snapshot
lvcreate -s --name lv_root_s --size 70G vg_system/lv_root
mount -o ro,nouuid /dev/vg_system/lv_root_s /mnt

yum -y install epel-release
yum -y install lbzip2
ln -s /usr/bin/lbzip2 /usr/local/bin/bzip2
tar --create --one-file-system --xattrs --bzip2 --verbose --exclude='tmp/*' --file=/root/ironic_root.tar.bz2 -C /mnt .
tar --create --one-file-system --xattrs --bzip2 --verbose --file=/root/ironic_boot.tar.bz2 -C /boot .
umount /mnt
lvconvert --merge vg_system/lv_root_s
